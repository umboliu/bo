    int minDistance(string word1, string word2) {
        if(word1.empty() && word2.empty()) return 0;
        if(word1.empty()) return word2.length();
        if(word2.empty()) return word1.length();
        
        int m = word1.length(),n = word2.length();
        vector<vector<int> > M(m,vector<int> (n,0));
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(j == 0 && i == 0) M[i][j] = (word1[i] == word2[j]?0:1);
                else if(i == 0 && j > 0) M[i][j] = min(M[i][j - 1] + 1,j + (word1[i] == word2[j]?0:1));
                else if(j == 0 && i > 0) M[i][j] = min(M[i - 1][j] + 1,i + (word1[i] == word2[j]?0:1));
                else{
                    int steps = min(M[i - 1][j] + 1,M[i][j - 1] + 1);
                    M[i][j] = min(steps,M[i - 1][j - 1] + (word1[i] == word2[j]?0:1));
                }
            }
        }
        
        return M[m - 1][n - 1];
    }
